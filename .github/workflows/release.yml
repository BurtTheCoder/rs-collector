name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  
jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            # Release ${{ steps.get_version.outputs.version }}
            
            ## Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
            
            ## Installation
            Download the appropriate binary for your platform below.
            
            ### Checksums
            SHA256 checksums are provided for each binary in the release assets.

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rs-collector-linux-amd64
            features: "default"
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: rs-collector-linux-arm64
            features: "default"
            use-cross: true
          
          # Windows builds
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rs-collector-windows-amd64.exe
            features: "default"
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: rs-collector-windows-arm64.exe
            features: "default"
          
          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-latest
            name: rs-collector-macos-amd64
            features: "default"
          - target: aarch64-apple-darwin
            os: macos-latest
            name: rs-collector-macos-arm64
            features: "default"
          
          # Special builds with all features
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rs-collector-linux-amd64-full
            features: "all"
            
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust-env
        with:
          rust-version: stable
          targets: ${{ matrix.target }}
          install-yara: 'false'  # Will be handled separately based on features
          cache-key: '-release-${{ matrix.target }}'

      - name: Install cross (if needed)
        if: matrix.use-cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install YARA for full builds
        if: matrix.features == 'all'
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libyara-dev
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install yara
          fi

      - name: Install YARA dependencies (Windows)
        if: runner.os == 'Windows' && matrix.features == 'all'
        run: |
          # Download and install YARA
          curl -L https://github.com/VirusTotal/yara/releases/download/v4.3.2/yara-4.3.2-win64.zip -o yara.zip
          7z x yara.zip -oyara
          echo "YARA_LIBRARY_PATH=${{ github.workspace }}/yara" >> $GITHUB_ENV

      - name: Build
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C strip=symbols"
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            if [ "${{ matrix.features }}" = "all" ]; then
              cross build --release --target ${{ matrix.target }} --all-features
            else
              cross build --release --target ${{ matrix.target }}
            fi
          else
            if [ "${{ matrix.features }}" = "all" ]; then
              cargo build --release --target ${{ matrix.target }} --all-features
            else
              cargo build --release --target ${{ matrix.target }}
            fi
          fi
        shell: bash

      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp rust_collector.exe ../../../${{ matrix.name }}
          else
            cp rust_collector ../../../${{ matrix.name }}
            chmod +x ../../../${{ matrix.name }}
          fi
        shell: bash

      - name: Create archives
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows ZIP
            7z a ${{ matrix.name }}.zip ${{ matrix.name }}
            # Also create SHA256
            certutil -hashfile ${{ matrix.name }} SHA256 > ${{ matrix.name }}.sha256
            certutil -hashfile ${{ matrix.name }}.zip SHA256 > ${{ matrix.name }}.zip.sha256
          else
            # Unix tar.gz
            tar czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}
            # Create SHA256
            if [ "${{ matrix.os }}" = "macos-latest" ]; then
              shasum -a 256 ${{ matrix.name }} > ${{ matrix.name }}.sha256
              shasum -a 256 ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256
            else
              sha256sum ${{ matrix.name }} > ${{ matrix.name }}.sha256
              sha256sum ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256
            fi
          fi

      - name: Upload binary
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ./${{ matrix.name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload archive (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ./${{ matrix.name }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ./${{ matrix.name }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SHA256 (binary)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ./${{ matrix.name }}.sha256
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SHA256 (archive - Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ./${{ matrix.name }}.zip.sha256
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SHA256 (archive - Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ./${{ matrix.name }}.tar.gz.sha256
          token: ${{ secrets.GITHUB_TOKEN }}

  build-packages:
    name: Build Distribution Packages
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev rpm ruby ruby-dev build-essential
          sudo gem install fpm

      - name: Build Linux binary
        run: |
          cargo build --release
          strip target/release/rust_collector

      - name: Create DEB package
        run: |
          fpm -s dir -t deb \
            --name rs-collector \
            --version ${{ needs.create-release.outputs.version }} \
            --architecture amd64 \
            --description "Rust-based system collector for DFIR" \
            --url "https://github.com/${{ github.repository }}" \
            --maintainer "${{ github.repository_owner }}" \
            --license "MIT" \
            --vendor "${{ github.repository_owner }}" \
            --prefix /usr/local/bin \
            target/release/rust_collector=/usr/local/bin/rs-collector

      - name: Create RPM package
        run: |
          fpm -s dir -t rpm \
            --name rs-collector \
            --version ${{ needs.create-release.outputs.version }} \
            --architecture x86_64 \
            --description "Rust-based system collector for DFIR" \
            --url "https://github.com/${{ github.repository }}" \
            --maintainer "${{ github.repository_owner }}" \
            --license "MIT" \
            --vendor "${{ github.repository_owner }}" \
            --prefix /usr/local/bin \
            target/release/rust_collector=/usr/local/bin/rs-collector

      - name: Upload DEB package
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ./*.deb
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload RPM package
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ./*.rpm
          token: ${{ secrets.GITHUB_TOKEN }}