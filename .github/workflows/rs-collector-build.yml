name: RS-Collector Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }} (${{ matrix.feature_name }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false  # Continue with other builds if one fails
      matrix:
        include:
          # ==== STANDARD BUILDS ====
          
          # Linux builds
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
            os_normalized: linux
            target: x86_64-unknown-linux-gnu
            features: ""
            feature_name: "standard"
          
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
            os_normalized: linux
            target: x86_64-unknown-linux-gnu
            features: "memory_collection,linux_memory"
            feature_name: "memory"
          
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
            os_normalized: linux
            target: x86_64-unknown-linux-gnu
            features: "memory_collection,linux_memory,yara"
            feature_name: "memory+yara"
          
          # macOS builds
          - os: macos
            runner: macos-latest
            arch: x86_64
            os_normalized: macos
            target: x86_64-apple-darwin
            features: ""
            feature_name: "standard"
          
          - os: macos
            runner: macos-latest
            arch: x86_64
            os_normalized: macos
            target: x86_64-apple-darwin
            features: "memory_collection,macos_memory"
            feature_name: "memory"
          
          # Windows builds
          - os: windows
            runner: windows-latest
            arch: x86_64
            os_normalized: windows
            target: x86_64-pc-windows-msvc
            features: ""
            feature_name: "standard"
          
          - os: windows
            runner: windows-latest
            arch: x86_64
            os_normalized: windows
            target: x86_64-pc-windows-msvc
            features: "memory_collection,windows_memory"
            feature_name: "memory"
            windows_memory_setup: true
            dependencies_script: |
              # Install Visual C++ Build Tools & Windows SDK components
              choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
              choco install windows-sdk-10-version-2004-all
              
              # Set environment variables for MemProcFS
              echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              
              # Install any vcpkg dependencies if needed
              vcpkg install openssl:x64-windows

          # ==== ARM64 BUILDS ====
          
          # Linux ARM64 (GitHub-hosted runners may not be available)
          - os: ubuntu
            runner: ubuntu-latest  # Fallback to regular runner for cross-compilation
            arch: arm64
            os_normalized: linux
            target: aarch64-unknown-linux-gnu
            features: ""
            feature_name: "standard"
            native: false  # Cross-compile instead
            setup_cross: |
              rustup target add aarch64-unknown-linux-gnu
          
          - os: ubuntu
            runner: ubuntu-latest  # Fallback to regular runner for cross-compilation
            arch: arm64
            os_normalized: linux
            target: aarch64-unknown-linux-gnu
            features: "memory_collection,linux_memory"
            feature_name: "memory"
            native: false  # Cross-compile instead
            setup_cross: |
              rustup target add aarch64-unknown-linux-gnu
          
          # macOS ARM64 (Apple Silicon) 
          - os: macos
            runner: macos-14
            arch: arm64
            os_normalized: macos
            target: aarch64-apple-darwin
            features: ""
            feature_name: "standard"
            native: true
          
          - os: macos
            runner: macos-14
            arch: arm64
            os_normalized: macos
            target: aarch64-apple-darwin
            features: "memory_collection,macos_memory"
            feature_name: "memory"
            native: true
          
          # Windows ARM64 (cross-compiled)
          - os: windows
            runner: windows-latest
            arch: arm64
            os_normalized: windows
            target: aarch64-pc-windows-msvc
            features: ""
            feature_name: "standard"
            native: false
            setup_cross: |
              rustup target add aarch64-pc-windows-msvc

          # ==== EMBEDDED CONFIG BUILDS ====
          
          # Linux with embedded config
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
            os_normalized: linux
            target: x86_64-unknown-linux-gnu
            features: "embed_config"
            feature_name: "embedded-config"
            use_config_embedding: true
            artifact_name: rust_collector_linux
          
          # macOS with embedded config
          - os: macos
            runner: macos-latest
            arch: x86_64
            os_normalized: macos
            target: x86_64-apple-darwin
            features: "embed_config"
            feature_name: "embedded-config"
            use_config_embedding: true
            artifact_name: rust_collector_macos
          
          # Windows with embedded config
          - os: windows
            runner: windows-latest
            arch: x86_64
            os_normalized: windows
            target: x86_64-pc-windows-msvc
            features: "embed_config"
            feature_name: "embedded-config"
            use_config_embedding: true
            artifact_name: rust_collector_windows.exe
          
          # ==== BUILDS USING NEW BUILD COMMAND ====
          
          # Linux with build command
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
            os_normalized: linux
            target: x86_64-unknown-linux-gnu
            features: ""
            feature_name: "build-command"
            use_build_command: true
            artifact_name: rust_collector_linux_cmd
          
          # macOS with build command
          - os: macos
            runner: macos-latest
            arch: x86_64
            os_normalized: macos
            target: x86_64-apple-darwin
            features: ""
            feature_name: "build-command"
            use_build_command: true
            artifact_name: rust_collector_macos_cmd
          
          # Windows with build command
          - os: windows
            runner: windows-latest
            arch: x86_64
            os_normalized: windows
            target: x86_64-pc-windows-msvc
            features: ""
            feature_name: "build-command"
            use_build_command: true
            artifact_name: rust_collector_windows_cmd.exe

    steps:
    - uses: actions/checkout@v4
      
    # Set up Rust environment with dependencies
    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust-env
      with:
        rust-version: stable
        targets: ${{ matrix.target }}
        install-yara: ${{ contains(matrix.features, 'yara') }}
        cache-key: '-build-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.feature_name }}'
    
    # Setup cross-compilation if needed
    - name: Set up cross-compilation
      if: matrix.setup_cross != '' && matrix.native != true
      run: ${{ matrix.setup_cross }}

    # Windows-specific setup for memory collection
    - name: Windows memory collection setup
      if: matrix.os == 'windows' && matrix.windows_memory_setup == true
      shell: pwsh
      run: ${{ matrix.dependencies_script }}


    # Prepare OS-specific config for embedded config builds
    - name: Prepare OS-specific config
      if: matrix.use_config_embedding == true
      shell: bash
      run: |
        mkdir -p config/
        echo "Using OS-specific config for ${{ matrix.os_normalized }}"
        # Copy to default_config.yaml for backward compatibility
        cp -f config/default_${{ matrix.os_normalized }}_config.yaml config/default_config.yaml
        # Make sure the OS-specific config exists (using cat instead of cp to avoid copying to itself)
        cat config/default_${{ matrix.os_normalized }}_config.yaml > /dev/null
    
    # Set environment variable for build.rs to use specific config
    - name: Set config environment variable
      if: matrix.use_config_embedding == true
      shell: bash
      run: |
        echo "RS_COLLECTOR_CONFIG=config/default_${{ matrix.os_normalized }}_config.yaml" >> $GITHUB_ENV
      
    # Build with the specified features (debug build for testing)
    - name: Debug build
      if: matrix.use_build_command != true
      run: cargo build --verbose --target ${{ matrix.target }} ${{ matrix.features != '' && format('--features={0}', matrix.features) || '' }}
      
    # Run tests (for non-cross-compiled builds)
    - name: Test
      if: matrix.native != false && matrix.use_build_command != true
      run: cargo test --verbose --target ${{ matrix.target }} ${{ matrix.features != '' && format('--features={0}', matrix.features) || '' }}
      
    # Build release version
    - name: Release build
      if: matrix.use_build_command != true
      run: cargo build --release --verbose --target ${{ matrix.target }} ${{ matrix.features != '' && format('--features={0}', matrix.features) || '' }}
    
    # Build using the new build command
    - name: Build with rs-collector build command
      if: matrix.use_build_command == true
      shell: bash
      run: |
        # First build the tool itself
        cargo build --verbose
        
        # Then use it to build the final binary with embedded config
        ./target/debug/rust_collector build -c config/default_${{ matrix.os_normalized }}_config.yaml --target-os ${{ matrix.os_normalized }} -n ${{ matrix.artifact_name }}
      
    # Upload artifacts for all builds
    - name: Upload artifacts (standard builds)
      if: matrix.use_build_command != true
      uses: actions/upload-artifact@v4
      with:
        name: rust_collector-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.feature_name }}
        path: |
          target/${{ matrix.target }}/release/rust_collector*
          !target/${{ matrix.target }}/release/rust_collector.d
          !target/${{ matrix.target }}/release/rust_collector.pdb
        if-no-files-found: warn
    
    # Upload artifacts for build command builds
    - name: Upload artifacts (build command)
      if: matrix.use_build_command == true
      uses: actions/upload-artifact@v4
      with:
        name: rust_collector-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.feature_name }}
        path: ${{ matrix.artifact_name }}
        if-no-files-found: warn
          
    # Optional: Create tagged release when tag is pushed
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ matrix.use_build_command == true && matrix.artifact_name || format('target/{0}/release/rust_collector*', matrix.target) }}
          !target/${{ matrix.target }}/release/rust_collector.d
          !target/${{ matrix.target }}/release/rust_collector.pdb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
