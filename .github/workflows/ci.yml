name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  OPENSSL_NO_VENDOR: 1

jobs:
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          # Add nightly for Linux only to catch future compatibility issues
          - os: ubuntu-latest
            rust: nightly
          # Add ARM64 macOS
          - os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust-env
        with:
          rust-version: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
          install-yara: 'true'

      - name: Check formatting
        if: matrix.rust == 'stable'
        run: cargo fmt --all -- --check

      - name: Run cargo check (no default features)
        run: cargo check --no-default-features

      - name: Run cargo check (default features)
        run: cargo check

      - name: Run cargo check (all features)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: cargo check --all-features

      - name: Run clippy
        if: matrix.rust == 'stable'
        run: cargo clippy -- -D warnings

      - name: Build (default features)
        run: cargo build --verbose

      - name: Build with memory_collection feature
        if: matrix.os != 'windows-latest'  # Skip on Windows due to YARA complexity
        run: cargo build --features memory_collection --verbose

      - name: Build with embed_config feature
        run: cargo build --features embed_config --verbose

      - name: Run tests (default features)
        run: cargo test --verbose

      - name: Run tests (all features)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: cargo test --all-features --verbose

      - name: Build documentation
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: cargo doc --no-deps --all-features

      - name: Run doc tests
        if: matrix.rust == 'stable'
        run: cargo test --doc ${{ matrix.os == 'windows-latest' && '' || '--all-features' }}

  minimal-versions:
    name: Check Minimal Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust-env
        with:
          rust-version: nightly
          install-yara: 'true'
          cache-key: '-minimal-versions'

      - name: Check with minimal versions
        run: |
          # Generate minimal versions
          cargo +nightly -Z minimal-versions update
          # Override problematic dependencies that don't specify correct minimal versions
          # rusoto_signature requires log >= 0.4.14 for log_enabled! macro
          cargo update -p log --precise 0.4.14
          # Now check with these versions
          cargo check --all-features

  # Ensure the crate can be published
  package:
    name: Package Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: Swatinem/rust-cache@v2.7.5

      - name: Run cargo publish dry run
        run: cargo publish --dry-run

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust-env
        with:
          rust-version: stable
          components: 'rustfmt, clippy, llvm-tools-preview'
          install-yara: 'true'
          cache-key: '-coverage'

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: |
          cargo llvm-cov clean --workspace
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false
          verbose: true

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: lcov.info

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust-env
        with:
          rust-version: stable
          install-yara: 'true'
          cache-key: '-benchmarks'

      - name: Run benchmarks
        run: |
          # Create benches directory if it doesn't exist
          mkdir -p benches
          # Create a simple benchmark file if none exists
          if [ ! -f benches/simple_bench.rs ]; then
            cat > benches/simple_bench.rs << 'EOF'
          #![feature(test)]
          extern crate test;
          
          #[cfg(test)]
          mod tests {
              use super::*;
              use test::Bencher;
          
              #[bench]
              fn bench_placeholder(b: &mut Bencher) {
                  b.iter(|| {
                      // Placeholder benchmark
                      let sum: u32 = (0..100).sum();
                      sum
                  });
              }
          }
          EOF
          fi
          # Run benchmarks if they exist, otherwise skip
          cargo bench --no-fail-fast || echo "No benchmarks found, skipping..."

      - name: Store benchmark results
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion